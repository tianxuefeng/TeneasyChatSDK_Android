plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
    id 'com.google.protobuf'
}

//sourceSets{
//    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
//}




android {
    namespace 'com.teneasy.sdk'
    compileSdk 33

    defaultConfig {
        minSdk 23
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/ASL2.0'
    }

    sourceSets {
        main {
            proto {
                srcDir 'src/main/proto'
                srcDir 'src/main/include'
            }
            java {

            }
        }
    }
   // main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.8.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        implementation 'io.crossbar.autobahn:autobahn-android:21.7.1'
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.1'
    implementation 'com.google.protobuf:protobuf-lite:3.0.0'

}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.21.12'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                groupId = 'com.github.tianxuefeng'
                artifactId = 'teneasy-chatsdk'
                version = '1.0.8'
            }
        }
    }
}