// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway/g_action.proto

package com.teneasyChat.gateway;

public final class GAction {
  private GAction() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * SC: service -&gt; client
   * CS: client -&gt; service
   * </pre>
   *
   * Protobuf enum {@code gateway.Action}
   */
  public enum Action
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 协议转发
     * </pre>
     *
     * <code>ActionForward = 0;</code>
     */
    ActionForward(0),
    /**
     * <pre>
     * 成功连接后,下发必要数据
     * </pre>
     *
     * <code>ActionSCHi = 1;</code>
     */
    ActionSCHi(1),
    /**
     * <pre>
     * 已方发消息
     * </pre>
     *
     * <code>ActionCSSendMsg = 2;</code>
     */
    ActionCSSendMsg(2),
    /**
     * <pre>
     * 已方发消息确认
     * </pre>
     *
     * <code>ActionSCSendMsgACK = 3;</code>
     */
    ActionSCSendMsgACK(3),
    /**
     * <pre>
     * 对方收消息
     * </pre>
     *
     * <code>ActionSCRecvMsg = 4;</code>
     */
    ActionSCRecvMsg(4),
    /**
     * <pre>
     * 对方收消息确认
     * </pre>
     *
     * <code>ActionCSRecvMsgACK = 5;</code>
     */
    ActionCSRecvMsgACK(5),
    /**
     * <pre>
     * 已方标记消息已读
     * 为什么需要标记已读:
     * (刚需)客服端换设备后, 无法知道自己哪些会话消息未读, 无法做 小红点标记
     * </pre>
     *
     * <code>ActionCSReadMsg = 6;</code>
     */
    ActionCSReadMsg(6),
    /**
     * <pre>
     * 对方收到消息已读(看需求, 没有需求则对于用户不做表现)
     * </pre>
     *
     * <code>ActionSCReadMsg = 7;</code>
     */
    ActionSCReadMsg(7),
    /**
     * <pre>
     * 已方撤回(删除)消息
     * </pre>
     *
     * <code>ActionCSDeleteMsg = 8;</code>
     */
    ActionCSDeleteMsg(8),
    /**
     * <pre>
     * 已方撤回(删除)消息确认
     * </pre>
     *
     * <code>ActionSCDeleteMsgACK = 9;</code>
     */
    ActionSCDeleteMsgACK(9),
    /**
     * <pre>
     * 对方撤回(删除)消息
     * </pre>
     *
     * <code>ActionSCDeleteMsg = 10;</code>
     */
    ActionSCDeleteMsg(10),
    /**
     * <pre>
     * 已方编辑消息
     * </pre>
     *
     * <code>ActionCSEditMsg = 11;</code>
     */
    ActionCSEditMsg(11),
    /**
     * <pre>
     * 已方编辑消息确认
     * </pre>
     *
     * <code>ActionSCEditMsgACK = 12;</code>
     */
    ActionSCEditMsgACK(12),
    /**
     * <pre>
     * 对方编辑消息
     * </pre>
     *
     * <code>ActionSCEditMsg = 13;</code>
     */
    ActionSCEditMsg(13),
    /**
     * <pre>
     * 结束: 对方正在输入(发送图片,音视频,文件)...
     * </pre>
     *
     * <code>ActionInputtingBegin = 14;</code>
     */
    ActionInputtingBegin(14),
    /**
     * <pre>
     * 结束: 对方正在输入
     * </pre>
     *
     * <code>ActionInputtingEnd = 15;</code>
     */
    ActionInputtingEnd(15),
    /**
     * <pre>
     * TODO: 客服端协议补充
     * [客服]聊天会话(所有权)发生改变
     * </pre>
     *
     * <code>ActionSCChatChanged = 16;</code>
     */
    ActionSCChatChanged(16),
    /**
     * <pre>
     * [用户]接待客服发生改变
     * </pre>
     *
     * <code>ActionSCWorkerChanged = 17;</code>
     */
    ActionSCWorkerChanged(17),
    /**
     * <pre>
     * 用户链接状态发生改变
     * </pre>
     *
     * <code>ActionSCUserConnectionChanged = 18;</code>
     */
    ActionSCUserConnectionChanged(18),
    /**
     * <pre>
     * [客服]以其身份模拟发送给用户的消息
     * 如: 自动回复的 答案
     * </pre>
     *
     * <code>ActionSCSimSend = 19;</code>
     */
    ActionSCSimSend(19),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 协议转发
     * </pre>
     *
     * <code>ActionForward = 0;</code>
     */
    public static final int ActionForward_VALUE = 0;
    /**
     * <pre>
     * 成功连接后,下发必要数据
     * </pre>
     *
     * <code>ActionSCHi = 1;</code>
     */
    public static final int ActionSCHi_VALUE = 1;
    /**
     * <pre>
     * 已方发消息
     * </pre>
     *
     * <code>ActionCSSendMsg = 2;</code>
     */
    public static final int ActionCSSendMsg_VALUE = 2;
    /**
     * <pre>
     * 已方发消息确认
     * </pre>
     *
     * <code>ActionSCSendMsgACK = 3;</code>
     */
    public static final int ActionSCSendMsgACK_VALUE = 3;
    /**
     * <pre>
     * 对方收消息
     * </pre>
     *
     * <code>ActionSCRecvMsg = 4;</code>
     */
    public static final int ActionSCRecvMsg_VALUE = 4;
    /**
     * <pre>
     * 对方收消息确认
     * </pre>
     *
     * <code>ActionCSRecvMsgACK = 5;</code>
     */
    public static final int ActionCSRecvMsgACK_VALUE = 5;
    /**
     * <pre>
     * 已方标记消息已读
     * 为什么需要标记已读:
     * (刚需)客服端换设备后, 无法知道自己哪些会话消息未读, 无法做 小红点标记
     * </pre>
     *
     * <code>ActionCSReadMsg = 6;</code>
     */
    public static final int ActionCSReadMsg_VALUE = 6;
    /**
     * <pre>
     * 对方收到消息已读(看需求, 没有需求则对于用户不做表现)
     * </pre>
     *
     * <code>ActionSCReadMsg = 7;</code>
     */
    public static final int ActionSCReadMsg_VALUE = 7;
    /**
     * <pre>
     * 已方撤回(删除)消息
     * </pre>
     *
     * <code>ActionCSDeleteMsg = 8;</code>
     */
    public static final int ActionCSDeleteMsg_VALUE = 8;
    /**
     * <pre>
     * 已方撤回(删除)消息确认
     * </pre>
     *
     * <code>ActionSCDeleteMsgACK = 9;</code>
     */
    public static final int ActionSCDeleteMsgACK_VALUE = 9;
    /**
     * <pre>
     * 对方撤回(删除)消息
     * </pre>
     *
     * <code>ActionSCDeleteMsg = 10;</code>
     */
    public static final int ActionSCDeleteMsg_VALUE = 10;
    /**
     * <pre>
     * 已方编辑消息
     * </pre>
     *
     * <code>ActionCSEditMsg = 11;</code>
     */
    public static final int ActionCSEditMsg_VALUE = 11;
    /**
     * <pre>
     * 已方编辑消息确认
     * </pre>
     *
     * <code>ActionSCEditMsgACK = 12;</code>
     */
    public static final int ActionSCEditMsgACK_VALUE = 12;
    /**
     * <pre>
     * 对方编辑消息
     * </pre>
     *
     * <code>ActionSCEditMsg = 13;</code>
     */
    public static final int ActionSCEditMsg_VALUE = 13;
    /**
     * <pre>
     * 结束: 对方正在输入(发送图片,音视频,文件)...
     * </pre>
     *
     * <code>ActionInputtingBegin = 14;</code>
     */
    public static final int ActionInputtingBegin_VALUE = 14;
    /**
     * <pre>
     * 结束: 对方正在输入
     * </pre>
     *
     * <code>ActionInputtingEnd = 15;</code>
     */
    public static final int ActionInputtingEnd_VALUE = 15;
    /**
     * <pre>
     * TODO: 客服端协议补充
     * [客服]聊天会话(所有权)发生改变
     * </pre>
     *
     * <code>ActionSCChatChanged = 16;</code>
     */
    public static final int ActionSCChatChanged_VALUE = 16;
    /**
     * <pre>
     * [用户]接待客服发生改变
     * </pre>
     *
     * <code>ActionSCWorkerChanged = 17;</code>
     */
    public static final int ActionSCWorkerChanged_VALUE = 17;
    /**
     * <pre>
     * 用户链接状态发生改变
     * </pre>
     *
     * <code>ActionSCUserConnectionChanged = 18;</code>
     */
    public static final int ActionSCUserConnectionChanged_VALUE = 18;
    /**
     * <pre>
     * [客服]以其身份模拟发送给用户的消息
     * 如: 自动回复的 答案
     * </pre>
     *
     * <code>ActionSCSimSend = 19;</code>
     */
    public static final int ActionSCSimSend_VALUE = 19;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Action valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Action forNumber(int value) {
      switch (value) {
        case 0: return ActionForward;
        case 1: return ActionSCHi;
        case 2: return ActionCSSendMsg;
        case 3: return ActionSCSendMsgACK;
        case 4: return ActionSCRecvMsg;
        case 5: return ActionCSRecvMsgACK;
        case 6: return ActionCSReadMsg;
        case 7: return ActionSCReadMsg;
        case 8: return ActionCSDeleteMsg;
        case 9: return ActionSCDeleteMsgACK;
        case 10: return ActionSCDeleteMsg;
        case 11: return ActionCSEditMsg;
        case 12: return ActionSCEditMsgACK;
        case 13: return ActionSCEditMsg;
        case 14: return ActionInputtingBegin;
        case 15: return ActionInputtingEnd;
        case 16: return ActionSCChatChanged;
        case 17: return ActionSCWorkerChanged;
        case 18: return ActionSCUserConnectionChanged;
        case 19: return ActionSCSimSend;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Action>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Action> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Action>() {
            public Action findValueByNumber(int number) {
              return Action.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.teneasyChat.gateway.GAction.getDescriptor().getEnumTypes().get(0);
    }

    private static final Action[] VALUES = values();

    public static Action valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Action(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gateway.Action)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026gateway/g_action.proto\022\007gateway*\327\003\n\006Ac" +
      "tion\022\021\n\rActionForward\020\000\022\016\n\nActionSCHi\020\001\022" +
      "\023\n\017ActionCSSendMsg\020\002\022\026\n\022ActionSCSendMsgA" +
      "CK\020\003\022\023\n\017ActionSCRecvMsg\020\004\022\026\n\022ActionCSRec" +
      "vMsgACK\020\005\022\023\n\017ActionCSReadMsg\020\006\022\023\n\017Action" +
      "SCReadMsg\020\007\022\025\n\021ActionCSDeleteMsg\020\010\022\030\n\024Ac" +
      "tionSCDeleteMsgACK\020\t\022\025\n\021ActionSCDeleteMs" +
      "g\020\n\022\023\n\017ActionCSEditMsg\020\013\022\026\n\022ActionSCEdit" +
      "MsgACK\020\014\022\023\n\017ActionSCEditMsg\020\r\022\030\n\024ActionI" +
      "nputtingBegin\020\016\022\026\n\022ActionInputtingEnd\020\017\022" +
      "\027\n\023ActionSCChatChanged\020\020\022\031\n\025ActionSCWork" +
      "erChanged\020\021\022!\n\035ActionSCUserConnectionCha" +
      "nged\020\022\022\023\n\017ActionSCSimSend\020\023B@\n\027com.tenea" +
      "syChat.gatewayZ%wcs/service/gateway/prot" +
      "ocol;protocolb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
