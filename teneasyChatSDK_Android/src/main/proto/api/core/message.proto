syntax = "proto3";
package api.core;

option go_package = "wcs/api/core;core";
option java_package = "com.teneasyChat.api.core";
import "api/option.proto";
import "validate/validate.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "api/common/c_message.proto";
import "api/common/c_chat.proto";
import "api/core/front.proto";

option(api.info) = {
  authors: ["calvin"],
  date: "2022-12-30",
};

message MessageSyncRequest {
  // 会话id 商户客服需要指定 客户可以省略
  int64 chat_id = 1;
  // 客户端已知的最早消息id，服务会发送更早的消息给客户端
  int64 msg_id = 2;
  // 加载多少条消息
  int32 count = 3[(validate.rules).int32={gt:0,lte:500}];
  // 结果包括msg_id这条信息
  bool with_last_one = 4;
}

message MessageSyncResponse {
  // 请求信息
  MessageSyncRequest request = 1;
  // 历史消息
  repeated common.Message list = 2;
  // 已过滤最早id, 分页时传递给下一页
  int64 last_msg_id = 3;
}

message MessageSearchRequest {
  // 搜索关键词
  string content = 1[(validate.rules).string = {min_len:2, max_len:256, not_contains:"%"}];
  // 会话id 可省略
  int64 chat_id = 2;
  // 最早消息id, 用户分页加载更多数据
  int64 msg_id = 3;
  // 开始时间
  google.protobuf.Timestamp start = 4;
  // 结束时间
  google.protobuf.Timestamp end = 5;
  // 加载多少条消息
  int32 count = 6[(validate.rules).int32 = {gt:0, lte:1024}];
}

message MessageSearchResponse {
  // 请求信息
  MessageSearchRequest request = 1;
  // 历史消息
  repeated common.Message list = 2;
  // 已过滤最早id, 分页时传递给下一页
  int64 last_msg_id = 3;
  // TODO: 临时字段: 前端没有维护 会话信息, 需要先给会话关联的头像和姓名
  map<int64, common.ChatDetail> detail = 4;
}

message QuerySpecMsgRequest {
  int64 chat_id = 1[(validate.rules).int64.gt = 0];
  int64 msg_id = 2[(validate.rules).int64.gt = 0];
}

message QuerySpecMsgResponse {
  common.Message msg = 1;
}

service MessageClientService {
  option (api.service) = {
    path: "api/message",
    auth: [AUTH_ROLE_ACCOUNT, AUTH_ROLE_SERVICE],
    tags: ["message"],
  };

  // 同步客户历史消息
  rpc sync(MessageSyncRequest) returns (MessageSyncResponse) {
    option (api.method) = {
      id: 1100,
      path:"sync",
      ready: true
    };
  }
}

service MessageTenantService {
  option (api.service) = {
    path: "tenant/message",
    auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
    tags: ["message"],
  };

  // 同步商户历史消息
  rpc sync(MessageSyncRequest) returns (MessageSyncResponse) {
    option (api.method) = {
      id: 1101,
      path:"sync",
      ready: true
    };
  }

  // 搜素商户历史消息
  rpc search(MessageSearchRequest) returns (MessageSearchResponse) {
    option (api.method) = {
      id: 1102,
      path:"search",
      ready: true
    };
  }

  // 查询指定消息 (使用场景1: 查询的回复消息的过早, 根据现有历史记录找不到, 批量查又浪费性能)
  rpc QuerySpec(QuerySpecMsgRequest) returns (QuerySpecMsgResponse) {
    option (api.method) = {
      id: 1103,
      path:"query-spec",
      ready: true
    };
  }
}

