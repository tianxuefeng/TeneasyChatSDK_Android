syntax = "proto3";
package api.core;

option go_package = "wcs/api/core;core";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "api/option.proto";
import "api/common/c_worker.proto";
import "api/common/c_base.proto";
import "google/protobuf/timestamp.proto";

option(api.info) = {
  authors: ["jeff"],
  date: "2022-12-06",
};

// 查询客服
message WorkerQueryRequest {
  common.Batch batch = 1;
  optional string name = 2;
}

message WorkerQueryResponse {
  repeated common.Worker items = 1;
  common.Batch batch = 2;
  int32 total = 3;
}

// 创建客服
message WorkerCreateRequest {
  // 客服账号
  string account = 1[(validate.rules).string = {min_bytes:6, max_bytes:20}];
  string password = 2 [(validate.rules).string = {min_bytes:6, max_bytes:20}];

  // 所在的组
  repeated int64 group_ids = 3[(validate.rules).repeated.unique = true];

  // 权限掩码, 理解有困难的话 随时可调
  int32 perm_mask = 4[(validate.rules).int32.gt = 0];

  // 客服名
  string name = 6[(validate.rules).string = {min_len:2, max_len:20}];

  // 头像url, 预留
  string avatar = 7;
}

// 更新客服
// 为何不做全量修改:
// 密码前端不知道, 修改后才能请求
message WorkerUpdateRequest {
  int32 worker_id = 1;

  optional string password = 2;
  // 所在的组
  optional common.SetInt64 group_ids = 3;
  // 权限掩码, 前端理解有困难的话 随时可调
  optional int32 perm_mask = 5;
  // 客服名
  optional string name = 6;
  // 头像url, 预留
  optional string avatar = 7;
}

message WorkerSession {
    int32 worker_id = 1;
    int32 session_id = 2;
    common.ConnectState connect_state = 3;
    common.OnlineState online_state = 4;
}

// 删除客服
message WorkerDeleteRequest {
  // 指定分组id
  int32 worker_id = 1;
}

// 将指定聊天会话转给指定客服
message WorkerTransferRequest {
  int64 chat_id = 1;
  int32 worker_id = 2;
}

message BlacklistApplyRequest {
  int64 chat_id = 1;
  // 转给有权限的客服目标
  int32 worker_id = 2;
}

message BlacklistConfirmRequest {
  int64 chat_id = 1;
}

message CheckWorkerStatusResponse {
  common.Worker worker = 1;
}

message CheckWorkerStatusRequest {
  // 咨询id
  uint32 consult_id = 1 [(validate.rules).uint32 = {gt:0}];
}


message GetWorkerStatusRequest {
  int32 worker_id = 1;
  optional common.ConnectState connect_state = 2;
  optional common.OnlineState online_state = 3;
}

message GetWorkerStatusResponse {
  repeated WorkerSession worker_session = 1;
}

message SetWorkerStatusRequest {
  common.OnlineState online_state = 1;
}

//message WorkerTransferResponse {
//  common.Worker worker = 1;
//}


message WorkerTransferResponse {
  common.Worker worker = 1;
}

message PasswordRequest {
  string old_password = 1;
  string new_password = 2;
}

message QueryFronterRequest {
  // 客服名称
  optional string name = 1;
  common.Batch batch = 2;
}

message QueryFronterResponse {
    repeated QueryFronterItem items = 1;
    int32 total = 2;
}

message QueryFronterItem {
  // 客服名称
  string name = 1;
  // 用户名
  string account = 2;
  // 客服组
  repeated string group =3;
  // 是否是主管
  bool isManager = 4;
}

message DataQueryRequest {
  // 统计时间开始时间
  optional string start_time = 1;
  // 统计时间结束时间
  optional string end_time = 2;
  // 客服组
  optional int32 group_id = 3;
  // 客服身份
  optional common.WorkerPermission worker_identity = 4;
  // 客服名称
  common.Page page = 5;
}

message DataQueryResponse {
  repeated DataQueryItem item = 1;
  int32 total = 2;
  // 统计人数
  int32 count_player = 3;
  // 平均3分钟回复率
  float three_rate = 4;
  // 平均响应时长
  float response_time = 5;
  // 平均服务时长
  float server_time = 6;
  // 平均累计在线时长
  int32 count_online_time = 7;
  // 平均接任务数
  int32 accepted_num = 8;
  // 平均转任务数
  int32 transfer_task = 9;
}

message DataQueryItem {
  // 客服名称
  string name = 1;
  // 分配人数
  int32 match_num = 2;
  // 3分钟回复率
  string three_response_rate = 3;
  // 转任务书
  int32 switching_task = 4;
  // 接受任务数
  int32 accept_assignment = 5;
  // 平均相应时长
  float corresponding_time = 6;
  // 所在组
  repeated string belong_group = 7;
  // 是否是一线客服
  bool first_line = 8;
  // 是否是主管
  bool is_manager =9;
  // 平均服务时长
  float average_time = 10;
  // 累计在线时长
  int32 accumulated_online_duration = 11;
}

service Worker {
  option (api.service) = {
    path: "/tenant/worker",
    tags: ["worker"],
    auth: [AUTH_ROLE_TENANT],
  };

  // 数据统计查询
  rpc DataQuery(DataQueryRequest) returns (DataQueryResponse) {
    option (api.method) = {
      id: 511,
      path: "data-query",
      ready: true,
      date: "2022-12-10"
    };
  }

  rpc QueryFronter(QueryFronterRequest) returns (QueryFronterResponse) {
    option (api.method) = {
      id: 500,
      path: "query-fronted",
      ready: true,
      date: "2022-12-10"
    };
  }

  rpc Query(WorkerQueryRequest) returns (WorkerQueryResponse) {
    option (api.method) = {
      id: 500,
      path: "query",
      ready: true,
      date: "2022-12-10"
    };
  }

  rpc Create(WorkerCreateRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 501,
      path: "create",
      ready: true,
      date: "2022-12-10"
    };
  }

  rpc Update(WorkerUpdateRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 502,
      path: "update",
      ready: true,
      date: "2022-12-10"
    };
  }

  rpc Delete(WorkerDeleteRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 503,
      path: "delete",
      ready: true,
      date: "2022-12-10"
    };
  }

  // 转接客服
  rpc Transfer(WorkerTransferRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 504,
      path: "transfer",
      ready: true,
      auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
      date: "2022-12-30"
    };
  }

  // 获取客服状态
  rpc GetWorkerStatus(GetWorkerStatusRequest) returns (GetWorkerStatusResponse) {
    option (api.method) = {
      id: 505,
      path: "get-worker-status",
      ready: true,
      auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
      date: "2022-12-30"
    };
  }

  // 设置客服状态
  rpc SetWorkerStatus(SetWorkerStatusRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 506,
      path: "set-worker-status",
      ready: true,
      auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
      date: "2022-12-30"
    };
  }

  // 检查客服状态
  rpc CheckWorkerStatus(CheckWorkerStatusRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 507,
      path: "check-worker-status",
      ready: true,
      auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
      date: "2022-12-30"
    };
  }

  // 修改密码
  rpc Password(PasswordRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 508,
      path: "password",
      ready: true,
      auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
      date: "2023-01-09"
    };
  }

  // 指定聊天会话拉入黑名单(申请并转交)
  rpc BlacklistApply(BlacklistApplyRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 509,
      path: "black-list-apply",
      ready: true,
      auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
      date: "2023-01-10"
    };
  }

  // 指定聊天会话拉入黑名单(确认)
  rpc BlacklistConfirm(BlacklistConfirmRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 510,
      path: "black-list-confirm",
      ready: true,
      auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
      date: "2023-01-10"
    };
  }
}

















